buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "com.github.hierynomus.license"


sourceCompatibility = '1.9'
targetCompatibility = '1.9'

group = "com.github.akarnokd" 
ext.githubProjectName = 'space-4x-management-game'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''

}

import org.gradle.internal.os.OperatingSystem

switch ( OperatingSystem.current() ) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

project.ext.lwjglVersion = "3.1.3"
project.ext.jomlVersion = "1.9.4";

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://oss.jfrog.org/libs-snapshot' }
    maven { url 'http://repo.spring.io/libs-snapshot' }
}

dependencies {
//    compile "io.reactivex.rxjava2:rxjava:2.1.3"
//    compile "com.github.akarnokd:rxjava2-extensions:0.17.6"

    compile "com.github.akarnokd:reactive4javaflow:0.1.3"
    compile "com.github.akarnokd:ixjava:1.0.0"

// #############################################################################
    compile "org.lwjgl:lwjgl:$lwjglVersion"
    compile "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjglVersion"
    compile "org.lwjgl:lwjgl-openal:$lwjglVersion"
    compile "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    runtime "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-jemalloc:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"

    compile "org.joml:joml:$jomlVersion"
    runtime "org.joml:joml:$jomlVersion"
}

[compileJava, compileTestJava]*.options*.compilerArgs << "-parameters"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters";
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


license {
    header rootProject.file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}


